version: '3.8'

networks:
  blockchain-network:
    driver: bridge

volumes:
  blockchain-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

services:
  # Blockchain Node Service
  blockchain-node:
    build: 
      context: .
      dockerfile: Dockerfile.blockchain
    container_name: blockchain-node
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - BLOCKCHAIN_PORT=3000
      - MINING_DIFFICULTY=4
      - MINING_REWARD=100
      - NETWORK_ID=blockchain-medcin
    volumes:
      - blockchain-data:/app/data
      - ./blockchain:/app/blockchain:ro
      - ./logs:/app/logs
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["node", "blockchain/server.js"]

  # Medical Service
  medcin:
    build: 
      context: ./services/medcin
      dockerfile: Dockerfile
    container_name: medcin-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - BLOCKCHAIN_URL=http://blockchain-node:3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=medcin_db
      - DB_USER=medcin_user
      - DB_PASS=secure_password_123
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secret_jwt_key_here
    volumes:
      - ./services/medcin:/app
      - ./logs:/app/logs
    working_dir: /app
    depends_on:
      - blockchain-node
      - postgres
      - redis
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["node", "index.js"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medcin-postgres
    environment:
      - POSTGRES_DB=medcin_db
      - POSTGRES_USER=medcin_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medcin_user -d medcin_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: medcin-redis
    volumes:
      - redis-data:/data
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass redis_password_123

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medcin-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - blockchain-node
      - medcin
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medcin-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - blockchain-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: medcin-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - blockchain-network
    restart: unless-stopped

  # Blockchain Explorer (Optional)
  explorer:
    build:
      context: ./explorer
      dockerfile: Dockerfile
    container_name: blockchain-explorer
    ports:
      - "3002:3002"
    environment:
      - BLOCKCHAIN_URL=http://blockchain-node:3000
      - PORT=3002
    depends_on:
      - blockchain-node
    networks:
      - blockchain-network
    restart: unless-stopped